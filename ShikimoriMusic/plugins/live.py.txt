from ShikimoriMusic.calls import queues
from ShikimoriMusic.calls.channelplay import get_channeplayCB
from ShikimoriMusic.mongo.queue import is_active_chat
from pyrogram import filters
from ShikimoriMusic import pbot
from youtubesearchpython.__future__ import VideosSearch
from pyrogram.types import InlineKeyboardMarkup
from ShikimoriMusic.mongo import db


@pbot.on_callback_query(filters.regex("LiveStream"))
async def play_live_stream(client, message, CallbackQuery, _):
    callback_data = CallbackQuery.data.strip()
    callback_request = callback_data.split(None, 1)[1]
    vidid, user_id, mode, cplay, fplay = callback_request.split("|")
    if CallbackQuery.from_user.id != int(user_id):
        try:
            return await CallbackQuery.answer(
                _["playcb_1"], show_alert=True
            )
        except:
            return
    try:
        chat_id, channel = await get_channeplayCB(
            _, cplay, CallbackQuery
        )
    except:
        return
    video = True if mode == "v" else None
    user_name = CallbackQuery.from_user.first_name
    await CallbackQuery.message.delete()
    try:
        await CallbackQuery.answer()
    except:
        pass
    mystic = await CallbackQuery.message.reply_text(
        _["play_2"].format(channel) if channel else _["play_1"]
    )
    try:
        if vidid:
            link = "https://www.youtube.com/watch?v=" + link
        if "&" in link:
            link = link.split("&")[0]
        results = VideosSearch(link, limit=1)
        for result in (await results.next())["result"]:
            title = result["title"]
            duration_min = result["duration"]
            vi_did = result["id"]
            yturl = result["link"]
            thumbnail = result["thumbnails"][0]["url"].split("?")[0]
        track_details = {
            "title": title,
            "link": yturl,
            "vidid": vi_did,
            "duration_min": duration_min,
            "thumb": thumbnail,
        }
        track_details, vi_did
        details, track_id = track_details, vi_did

    except Exception:
        return await mystic.edit_text(_["play_3"])
    ffplay = True if fplay == "f" else None
    if not details["duration_min"]:
        try:
            link = result["link"]
            vidid = result["vidid"]
            title = (result["title"]).title()
            duration_min = "Live Track"
            status = True if video else None
            if await is_active_chat(chat_id):
                position = await queues.put(message.chat.id, file=file_path)
                await pbot.send_message(
                    original_chat_id,
                    "‚è≥ Added to Queue at **#{0}\n\nüí°Title:** {1}\n**‚è±Duration:** {2}\nüë§**Added By:** {3}".format(
                        position, title[:30], duration_min, user_name
                    ),
                )
            else:
                if not forceplay:
                    db[chat_id] = []
                n, file_path = await YouTube.video(link)
                if n == 0:
                    raise AssistantErr(_["str_3"])
                await Yukki.join_call(
                    chat_id, original_chat_id, file_path, video=status
                )
                await put_queue(
                    chat_id,
                    original_chat_id,
                    f"live_{vidid}",
                    title,
                    duration_min,
                    user_name,
                    vidid,
                    user_id,
                    "video" if video else "audio",
                    forceplay=forceplay,
                )
                img = await gen_thumb(vidid)
                button = telegram_markup(_)
                run = await pbot.send_photo(
                    original_chat_id,
                    photo=img,
                    caption=_["stream_1"].format(
                        user_name,
                        f"https://t.me/{pbot.username}?start=info_{vidid}",
                    ),
                    reply_markup=InlineKeyboardMarkup(button),
                )
                db[chat_id][0]["mystic"] = run
                db[chat_id][0]["markup"] = "tg"
        except Exception as e:
            ex_type = type(e).__name__
            err = (
                e
                if ex_type == "AssistantErr"
                else _["general_3"].format(ex_type)
            )
            return await mystic.edit_text(err)
    else:
        return await mystic.edit_text("Not a live stream")
    await mystic.delete()
